#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <windows.h>
#include <time.h>
#include <conio.h>
#include <thread>
#include <stdbool.h>
#include <string.h>
#include <mutex>

#define formx 30
#define tox 22
#define formy -60
#define toy 40
#define esc 27
#define scount 15
#define screen_x 80
#define screen_y 25
#define VK_a 0x61
HANDLE rHnd;
DWORD fdwMode;
HANDLE wHnd;
CHAR_INFO consoleBuffer[screen_x * screen_y];
COORD bufferSize = { screen_x,screen_y };
COORD characterPos = { 0,0 };
SMALL_RECT windowSize = { 0,0,screen_x ,screen_y };
DWORD numEvents = 0;
DWORD numEventsRead = 0;

int color[15];
int check = 0;
int round_eny = 0;
int covidx[scount], covidy[scount], covid_color[scount], item_plusx = 0, item_plusy = 0;
int waitfor = 0, first = 0;
bool gotit = false;
int maskx = 40, masky = 18;
int bufferx, buffery;
int new_count;

std::mutex mtx;

void setcursor(bool visible) {
	HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO lpCursor;
	lpCursor.bVisible = visible;
	lpCursor.dwSize = 20;
	SetConsoleCursorInfo(console, &lpCursor);
}

void gotoxy(int x, int y)
{
	COORD c = { x, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}

void setcolor(int fg, int bg) {
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hConsole, bg * 16 + fg);
}

char cursor(int x, int y) {
	HANDLE hStd = GetStdHandle(STD_OUTPUT_HANDLE);
	char buf[2]; COORD c = { x,y }; DWORD num_read;
	if (!ReadConsoleOutputCharacter(hStd, (LPTSTR)buf, 1, c, (LPDWORD)&num_read)) {
		return '\0';
	}
	else { return buf[0]; }
}

int setConsole(int x, int y)
{
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
	SetConsoleScreenBufferSize(wHnd, bufferSize);
	return 0;
}

int setMode() 
{
	rHnd = GetStdHandle(STD_INPUT_HANDLE);
	fdwMode = ENABLE_EXTENDED_FLAGS | ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT;
	SetConsoleMode(rHnd, fdwMode);
	return 0;
}

void clear_buffer()
{   
	for (int y = 0; y < 20; y++) {
		for (int x = 30; x < 55; x++) {
			consoleBuffer[x + screen_x * y].Attributes = 7;
			consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
		}
	}
}

void gimme_yourname() {
	gotoxy(32, 7);
	printf("ENTER YOUR NAME\n");
	gotoxy(27, 8);
	printf("(less than 20 Characters)");
	
}
void clear_bullet(int x, int y) {
	mtx.lock();
	setcolor(7, 0);
	gotoxy(x, y); printf(" ");
	mtx.unlock();
}

void fill_buffer_to_console() {
	WriteConsoleOutputA(wHnd, consoleBuffer, bufferSize, characterPos, &windowSize);
}

void mask_draw(int x, int y) {
	mtx.lock();
	gotoxy(x, y);
	setcolor(7, 0);
	printf(" [|==|] ");
	mtx.unlock();
}

void alcohol_draw(int x, int y,int bullet) {
	mtx.lock();
	gotoxy(x, y);
	setcolor(7, 0);
	printf(" [%d]-|-[%d] ", bullet, bullet);
	mtx.unlock();
}

void bullet_draw(int x, int y) {
	mtx.lock();
	gotoxy(x, y);
	setcolor(0, 3);
	printf(" ^ ");
	mtx.unlock();
}

void itemplus_draw() {
	item_plusx = 30 + rand() % 20;
	item_plusy = -1;
}

void itemplus_fall() {
		if ( item_plusy >= 20 ) {
			itemplus_draw();
			new_count = 1500 + rand() % 2000;
		}
		else {
			item_plusy += 1;
		}
}

void fill_itemplus_to_buffer() {
		int x = item_plusx;
		int y = item_plusy;
		consoleBuffer[x + screen_x * y].Attributes = 11;
		consoleBuffer[x + screen_x * y].Char.AsciiChar = '+';
		/*gotoxy(x, y);
		setcolor(11, 0);
		printf("+");*/
}

void me(int x, int y,char s[]) {
	int a = 20;
		for (int x = 0; x < 80; ++x) {
			//gotoxy(x, a);
			//setcolor(11, 0);
			//printf("_");
			consoleBuffer[x + screen_x * a].Attributes = 11;
		    consoleBuffer[x + screen_x * a].Char.AsciiChar = '_';
		}
		mtx.lock();
		gotoxy(x, y);
		setcolor(13,15);
		printf(" %s ", s);
		mtx.unlock();
}

void covid_draw() { 
	for (int i = 0; i < scount; i++) {
		covidx[i] = formx + rand() % tox;
		covidy[i] = formy + rand() % toy;
		color[i] = 1 + rand() % 7;
	}
}

void score_count(int a) {
	mtx.lock();
	gotoxy(1, 1);
	setcolor(0, 15);
	printf(" Score : %d ", a);
	mtx.unlock();
}

void hp_count(int a) {
	mtx.lock();
	gotoxy(1, 3);
	setcolor(4, 15);
	printf(" HP : %d ", a);
	mtx.unlock();
}

void covid_fall() {
	int i = 0;
	for (i = 0; i < scount; i++) {
		check += 1;
		if (covidy[i] >= screen_y - 1) {
			covidx[i] = formx + rand() % tox;
			covidy[i] = formy + rand() % toy;
			color[i] = 1 + rand() % 7;
		}
		else {
			covidy[i] = covidy[i] + 1;
		}
	}
}

//void change_color() { color = 1 + rand() % 9; }
void clear_enemy() {
	int x, y;
	for (int i = 0; i < scount; i++) {
		x = covidx[i];
		y = covidy[i];
		gotoxy(x, y);
		setcolor(7, 0);
		printf(" ");
	}
}
void covidShow() {
	int x, y;
	for (int i = 0; i < scount; i++) {
		x = covidx[i];
		y = covidy[i];
		mtx.lock();
		gotoxy(x, y);
		setcolor(color[i], 0);
		printf("*");
		mtx.unlock();
	}
}

void clear_screen() {
	for (int y = 0; y < 25; y++) {
		for (int x = 0; x < 80; x++) {
			gotoxy(x, y);
			setcolor(7, 0);
			printf(" ");
		}
	}
}

void clearONplay() {
	for (int y = 0; y < 19; y++) {
		for (int x = 34; x < 60; x++) {
			mtx.lock();
			setcolor(7, 0);
			gotoxy(x, y);
			printf(" ");
			mtx.unlock();
		}
	}
}
void clear_for_pause() {
	setcolor(7,0);
	for (int y = 0; y < 20; y++) {
		for (int x = 0; x < 80; x++) {
			gotoxy(x, y);
			printf(" ");
		}
	}
}

void fill_covid_to_buffer() {
	for (int i = 0; i < scount; i++) {
		int x = covidx[i];
		int y = covidy[i];
		if (covidy[i] >= 0) {
		consoleBuffer[x + screen_x * y].Attributes = color[i];
		consoleBuffer[x + screen_x * y].Char.AsciiChar = '*';
	    }
	}
}

void game_starto() {
	gotoxy(30, 10);
	setcolor(15, 13);
	printf(" HUMAN VS COVID-19 ");
	gotoxy(32, 12);
	setcolor(7, 0);
	printf(" Presented by ");
	gotoxy(26, 13);
	setcolor(11, 0);
	printf(" 64010051 ");
	setcolor(3, 0);
	printf("Kitti Chumchuen ");
	gotoxy(26, 17);
	setcolor(7, 0);
}

void high_score() {
	gotoxy(33, 13);
	setcolor(11,0);
	printf("Score Board");
	gotoxy(0, 15);
	setcolor(14, 0);
}

void vaccine() {
	
}

int main()
{
	char myname[20], startEnter;
	int countdown = 0, namelange;
	int hp = 20;
	int score = 0;
	char check1, check2, check3, check4, check5, check6, checkGotAttack;
	char ch = '.';
	char ch_move = '.';
	setcursor(0);
	int i = 0, x = 0, y = 0, direction = 0, r = 0;
	/* ----- ALCOHOL & BULLET ------ */
	int bullet[10], xb[10], ye[10], ybt[10];
	for (int i = 0; i < 10; i++) {
		bullet[i] = 0;
		xb[i] = 0;
		ye[i] = 0;
		ybt[i] = 0;
	}
	int al_x = 40;
	int al_y = 19;
	int total_bullet = 10;
	int rex = 0, rey = 0;
	/*  --------------------------  */
	srand(time(NULL));
	setConsole(screen_x, screen_y);
	bool change_alcohol = false;
	bool play = false;
	bool noneStop = true;
	bool still_mask = true;
	bool still_alcohol = false;
	FILE* fp;
	DWORD numEvents = 0;
	DWORD numEventsRead = 0;
	int place[3];
	int h_score[3];
	char name[3];
	bool pause = true;
	int menu_x = 0, menu_y = 0;
	int trans = 0;
	new_count = 500;
	char bullet_check[10];
	bool paused = true;
	bool newgame = false;
	bool cfornew = false;
	bool online = true;
	struct player {
		char name[20];
		int score;
		int place;
	};
	player p[5];
	/* ----------      GET SCORE FROM FILE    ----------- */
	fp = fopen("Top_Player.txt", "r");
	for (int i = 0; i < 5; i++) {
		if (i < 1) {
			fscanf(fp, "%d %s %d", &p[0].place, &p[0].name, &p[0].score);
		}
		else if (i < 2) {
			fscanf(fp, "%d %s %d", &p[1].place, &p[1].name, &p[1].score);
		}
		else if (i < 3) {
			fscanf(fp, "%d %s %d", &p[2].place, &p[2].name, &p[2].score);
		}
		else if (i < 4) {
			fscanf(fp, "%d %s %d", &p[3].place, &p[3].name, &p[3].score);
		}
		else if (i < 5) {
			fscanf(fp, "%d %s %d", &p[4].place, &p[4].name, &p[4].score);
		}
	}
	fclose(fp);
	itemplus_draw();
	/* -------------    GAME START    ----------- */
	while (1) {
		game_starto();
		system("pause");
		std::thread q(Beep, 700, 100);
		q.detach();
		break;
	}
	clear_screen();
	gimme_yourname();
	high_score();
	/* ----------     HIGHSET SCORE     ----------- */
	printf("%31s     name     score\n", "#");
	setcolor(9, 0);
	printf("%31d     %s      %d\n", p[0].place, p[0].name, p[0].score);
	printf("%31d     %s      %d\n", p[1].place, p[1].name, p[1].score);
	printf("%31d     %s      %d\n", p[2].place, p[2].name, p[2].score);
	printf("%31d     %s      %d\n", p[3].place, p[3].name, p[3].score);
	printf("%31d     %s      %d\n", p[4].place, p[4].name, p[4].score);
	gotoxy(31, 10);
	setcolor(4, 0);
	printf("> ");
	scanf("%[^\n]", myname);
	namelange = strlen(myname);
	namelange = 40 - (namelange / 2);
	clear_screen();
	setMode();
	covid_draw();
	int checking;
	mask_draw(maskx, masky);
	play = true;
	while (online) {
		while (pause) {
			while (play)
			{
				
				//clear_enemy();
				//clearONplay();
				covid_fall();
				if (countdown >= new_count) {
					itemplus_fall();
				}
				clear_buffer();
				fill_covid_to_buffer();
				//covidShow();
				fill_itemplus_to_buffer();
				fill_buffer_to_console();
				me(namelange, 22, myname);
				score_count(score);
				hp_count(hp);
				if (still_mask) {
					check1 = cursor(maskx + 1, masky - 1);
					check2 = cursor(maskx + 2, masky - 1);
					check3 = cursor(maskx + 3, masky - 1);
					check4 = cursor(maskx + 4, masky - 1);
					check5 = cursor(maskx + 5, masky - 1);
					check6 = cursor(maskx + 6, masky - 1);
					for (int n = 0; n < 80; n++) {
						checkGotAttack = cursor(n, 19);
						if (checkGotAttack == '*') {
							hp = hp - 1;
							checkGotAttack = '.';
						}
					}
					if (check1 == '*' || check2 == '*' || check3 == '*' || check4 == '*' || check5 == '*' || check6 == '*') {
						score = score + 1;
						std::thread q(Beep, 700, 100);
						q.detach();
						for (int i = 0; i < scount; i++) {
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 1) {
								covidx[i] = formx + rand() % tox;
								covidy[i] = formy + rand() % toy;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 2) {
								covidx[i] = formx + rand() % tox;
								covidy[i] = formy + rand() % toy;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 3) {
								covidx[i] = formx + rand() % tox;
								covidy[i] = formy + rand() % toy;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 4) {
								covidx[i] = formx + rand() % tox;
								covidy[i] = formy + rand() % toy;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 5) {
								covidx[i] = formx + rand() % tox;
								covidy[i] = formy + rand() % toy;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 6) {
								covidx[i] = formx + rand() % tox;
								covidy[i] = formy + rand() % toy;
							}
						}
					}
					countdown += 10;
					printf("%5d", countdown);
					if (check1 == '+' || check2 == '+' || check3 == '+' || check4 == '+' || check5 == '+' || check6 == '+') {
						gotit = true;
						still_mask = false;
						still_alcohol = true;
						itemplus_draw();
					}
					GetNumberOfConsoleInputEvents(rHnd, &numEvents);
					if (numEvents != 0) {
						INPUT_RECORD* eventBuffer = new INPUT_RECORD[numEvents];
						ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);
						for (DWORD i = 0; i < numEventsRead; ++i) {
							if (eventBuffer[i].EventType == MOUSE_EVENT) {
								int posx = eventBuffer[i].Event.MouseEvent.dwMousePosition.X - 3;
								int posy = eventBuffer[i].Event.MouseEvent.dwMousePosition.Y;
								maskx = posx;
								masky = posy;
								mask_draw(maskx, masky);
							}
							if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) {
								play = false;
								clear_for_pause();;
							}
						}
						delete[] eventBuffer;
					}

					Sleep(100);
				}
				//}
				if (still_alcohol) {
					//เปลี่ยนเป็นEventแทน//
					GetNumberOfConsoleInputEvents(rHnd, &numEvents);
					if (numEvents != 0) {
						INPUT_RECORD* eventBuffer = new INPUT_RECORD[numEvents];
						ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);
						for (DWORD i = 0; i < numEventsRead; ++i) {
							if (eventBuffer[i].EventType == KEY_EVENT && eventBuffer[i].Event.KeyEvent.bKeyDown == true) {
								if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 97) {
									direction = -1;
								}
								else if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 100) {
									direction = 1;
								}
								else if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 115) {
									direction = 0;
								}
								else if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == ' ' && bullet[(r + 1) % 10] == 0) {
									r = (r + 1) % 10;
									r += 1;
									ybt[r] = 18;
									xb[r] = al_x + 7;
									bullet[r] = 1;
									total_bullet -= 1;
									std::thread q(Beep, 700, 100);
									q.detach();
								}
								if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) {
									play = false;
									clear_for_pause();
								}
							}
						}
						delete[] eventBuffer;
					}
					for (int i = 0; i < 10; i++) {
						if (bullet[i] == 1) {
							bullet_draw(xb[i], --ybt[i]);
							if (ybt[i] == 0) {
								bullet[i] = 0;
							}
						}
						bullet_check[i] = cursor(xb[i], ybt[i] - 1);
						if (bullet_check[i] == '*') {
							printf("GOT IT");
							ybt[i] = 0;
							score += 1;
							if (covidy[i] == ybt[i] - 1 && covidx[i] == xb[i] + 1) {
								covidx[i] = formx + rand() % tox;
								covidy[i] = formy + rand() % toy;
							}
						}
					}
					if (direction == -1 && al_x > 0) {
						al_x -= 1;
						alcohol_draw(--al_x, al_y, total_bullet);
					}
					else if (direction == 1 && al_x < 69) {
						al_x += 1;
						alcohol_draw(++al_x, al_y, total_bullet);
					}
					else if (direction == 0) {
						alcohol_draw(al_x, al_y, total_bullet);
					}
					for (int n = 0; n < 80; n++) {
						checkGotAttack = cursor(n, 19);
						if (checkGotAttack == '*') {
							hp = hp - 1;
							checkGotAttack = '.';
						}
					}
					if (total_bullet == 0) {
						still_alcohol = false;
						still_mask = true;
						gotit = false;
						countdown = 0;
						total_bullet = 10;
						al_x = 40;
						direction = 0;
					}
					Sleep(100);
				}
				
				if (hp <= 0) {
					if (score > p[4].score && score > p[3].score && score > p[2].score && score > p[1].score && score > p[0].score) {
						p[4].score = p[3].score;
						p[3].score = p[2].score;
						p[2].score = p[1].score;
						p[1].score = p[0].score;
						p[0].score = score;
						strcpy(p[4].name, p[3].name);
						strcpy(p[3].name, p[2].name);
						strcpy(p[2].name, p[1].name);
						strcpy(p[1].name, p[0].name);
						strcpy(p[0].name, myname);
					}
					else if (score > p[4].score && score > p[3].score && score > p[2].score && score > p[1].score && score < p[0].score) {
						p[4].score = p[3].score;
						p[3].score = p[2].score;
						p[2].score = p[1].score;
						p[1].score = score;
						strcpy(p[4].name, p[3].name);
						strcpy(p[3].name, p[2].name);
						strcpy(p[2].name, p[1].name);
						strcpy(p[1].name, myname);
					}
					else if (score > p[4].score && score > p[3].score && score > p[2].score && score < p[1].score ) {
						p[4].score = p[3].score;
						p[3].score = p[2].score;
						p[2].score = score;
						strcpy(p[4].name, p[3].name);
						strcpy(p[3].name, p[2].name);
						strcpy(p[2].name, myname);
					}
					else if (score > p[4].score && score > p[3].score && score < p[2].score) {
						p[4].score = p[3].score;
						p[3].score = score;
						strcpy(p[4].name, p[3].name);
						strcpy(p[3].name, myname);
					}
					else if (score > p[4].score && score < p[3].score ) {
						p[4].score = score;
						strcpy(p[4].name, myname);
					}
					fp = fopen("Top_Player.txt", "w");
					fprintf(fp, "\t%d \t%s\t%d\n", p[0].place, p[0].name, p[0].score);
					fprintf(fp, "\t%d \t%s\t%d\n", p[1].place, p[1].name, p[1].score);
					fprintf(fp, "\t%d \t%s\t%d\n", p[2].place, p[2].name, p[2].score);
					fprintf(fp, "\t%d \t%s\t%d\n", p[3].place, p[3].name, p[3].score);
					fprintf(fp, "\t%d \t%s\t%d\n", p[4].place, p[4].name, p[4].score);
					fclose(fp);
					play = false;
					pause = false;
					newgame = true;
					cfornew = true;
					clear_screen();
					break;
				}
			}
			if (paused) {
				clear_for_pause();
				paused = false;
			}
			if (pause) {
				setcolor(9, 14);
				gotoxy(36, 8);
				printf(" Continue ");
				gotoxy(38, 11);
				printf(" Save ");
				gotoxy(38, 14);
				printf(" Exit ");
				GetNumberOfConsoleInputEvents(rHnd, &numEvents);
				if (numEvents != 0) {
					INPUT_RECORD* eventBuffer = new INPUT_RECORD[numEvents];
					ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);
					for (DWORD i = 0; i < numEventsRead; ++i) {
						if (eventBuffer[i].EventType == MOUSE_EVENT) {
							menu_x = eventBuffer[i].Event.MouseEvent.dwMousePosition.X;
							menu_y = eventBuffer[i].Event.MouseEvent.dwMousePosition.Y;
						}
						if (eventBuffer[i].Event.MouseEvent.dwButtonState & FROM_LEFT_1ST_BUTTON_PRESSED) {
							if (menu_y == 7 || menu_y == 8 || menu_y == 9) {
								if (menu_x == 35 || menu_x == 36 || menu_x == 37 || menu_x == 38 || menu_x == 39 || menu_x == 40 || menu_x == 41 || menu_x == 42) {
									play = true;
									paused = true;
								}
							}
							if (menu_y == 10 || menu_y == 11 || menu_y == 12) {
								if (menu_x == 38 || menu_x == 39 || menu_x == 40 || menu_x == 41) {
									if (score > p[4].score && score > p[3].score && score > p[2].score && score > p[1].score && score > p[0].score) {
										p[4].score = p[3].score;
										p[3].score = p[2].score;
										p[2].score = p[1].score;
										p[1].score = p[0].score;
										p[0].score = score;
										strcpy(p[4].name, p[3].name);
										strcpy(p[3].name, p[2].name);
										strcpy(p[2].name, p[1].name);
										strcpy(p[1].name, p[0].name);
										strcpy(p[0].name, myname);
									}
									else if (score > p[4].score && score > p[3].score && score > p[2].score && score > p[1].score && score < p[0].score) {
										p[4].score = p[3].score;
										p[3].score = p[2].score;
										p[2].score = p[1].score;
										p[1].score = score;
										strcpy(p[4].name, p[3].name);
										strcpy(p[3].name, p[2].name);
										strcpy(p[2].name, p[1].name);
										strcpy(p[1].name, myname);
									}
									else if (score > p[4].score && score > p[3].score && score > p[2].score && score < p[1].score) {
										p[4].score = p[3].score;
										p[3].score = p[2].score;
										p[2].score = score;
										strcpy(p[4].name, p[3].name);
										strcpy(p[3].name, p[2].name);
										strcpy(p[2].name, myname);
									}
									else if (score > p[4].score && score > p[3].score && score < p[2].score) {
										p[4].score = p[3].score;
										p[3].score = score;
										strcpy(p[4].name, p[3].name);
										strcpy(p[3].name, myname);
									}
									else if (score > p[4].score && score < p[3].score) {
										p[4].score = score;
										strcpy(p[4].name, myname);
									}
									fp = fopen("Top_Player.txt", "w");

									fprintf(fp, "\t%d \t%s\t%d\n", p[0].place, p[0].name, p[0].score);
									fprintf(fp, "\t%d \t%s\t%d\n", p[1].place, p[1].name, p[1].score);
									fprintf(fp, "\t%d \t%s\t%d\n", p[2].place, p[2].name, p[2].score);
									fprintf(fp, "\t%d \t%s\t%d\n", p[3].place, p[3].name, p[3].score);
									fprintf(fp, "\t%d \t%s\t%d\n", p[4].place, p[4].name, p[4].score);
									fclose(fp);
									gotoxy(38, 17);
									setcolor(7, 2);
									printf("Saved!");
								}
							}
							if (menu_y == 13 || menu_y == 14 || menu_y == 15) {
								if (menu_x == 38 || menu_x == 39 || menu_x == 40 || menu_x == 41) {
									pause = false;
									gotoxy(38, 17);
									printf("OUT!");
									newgame = false;
									break;
								}
							}
						}
					}
					delete[] eventBuffer;
				}
			}
		}

		if (newgame) {
			setcolor(0, 14);
			gotoxy(30, 6);
			printf("!! GAME OVER !!");
			setcolor(7, 12);
			gotoxy(32, 9);
			printf(" NEW GAME ");
			gotoxy(34, 12);
			printf(" EXIT ");
			
		}
		    GetNumberOfConsoleInputEvents(rHnd, &numEvents);
			if (numEvents != 0) {
				INPUT_RECORD* eventBuffer = new INPUT_RECORD[numEvents];
				ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);
				for (DWORD i = 0; i < numEventsRead; ++i) {
					if (eventBuffer[i].EventType == MOUSE_EVENT) {
						menu_x = eventBuffer[i].Event.MouseEvent.dwMousePosition.X;
						menu_y = eventBuffer[i].Event.MouseEvent.dwMousePosition.Y;
						//gotoxy(menu_x, menu_y);
						//printf("(%d,%d)", menu_x, menu_y);
					}
					if (eventBuffer[i].Event.MouseEvent.dwButtonState & FROM_LEFT_1ST_BUTTON_PRESSED) {
						//gotoxy(menu_x, menu_y);
						//printf("(%d,%d)", menu_x, menu_y);
						if (menu_y == 8 || menu_y == 9 || menu_y == 10) {
							if (menu_x == 39 || menu_x == 30 || menu_x == 31 || menu_x == 32 || menu_x == 33 || menu_x == 34 || menu_x == 35 || menu_x == 36 || menu_x == 37 || menu_x == 38) {
								play = true;
								paused = true;
								score = 0;
								hp = 20;
								al_x = 40;
								al_y = 19;

								for (int i = 0; i < 10; i++) {
									ybt[i] = 0;
									bullet[i] = 0;
								}
								newgame = false;
								clear_screen();
							}
						}
						if (menu_y == 11 || menu_y == 12 || menu_y == 13) {
							if (menu_x == 35 || menu_x == 36 || menu_x == 37 || menu_x == 38 || menu_x == 39 || menu_x == 40) {
								newgame = false;
								online = false;
								play = false;
								for (int i = 0; i < 10; i++) {
									ybt[i] = 0;
									bullet[i] = 0;
								}
								break;
							}
						}
					}	
				}
			delete[] eventBuffer;
			}
		//}
	}
	return 0;
}
	
