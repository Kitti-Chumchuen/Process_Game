#include <stdio.h>
#include <windows.h>
#include <time.h>
#include <conio.h>
#include <thread>
#include <stdbool.h>

#define esc 27
#define scount 20
#define screen_x 80
#define screen_y 25
HANDLE rHnd;
DWORD fdwMode;
HANDLE wHnd;
CHAR_INFO consoleBuffer[screen_x * screen_y];
COORD bufferSize = { screen_x,screen_y };
COORD characterPos = { 0,0 };
SMALL_RECT windowSize = { 0,0,screen_x - 1,screen_y - 1 };
DWORD numEvents = 0;
DWORD numEventsRead = 0;

int color = 7;
int check = 0;
int covidx[scount], covidy[scount];

void setcursor(bool visible)
{
	HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO lpCursor;
	lpCursor.bVisible = visible;
	lpCursor.dwSize = 20;
	SetConsoleCursorInfo(console, &lpCursor);
}

void gotoxy(int x, int y)
{
	COORD c = { x, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}

char cursor(int x, int y) {
	HANDLE hStd = GetStdHandle(STD_OUTPUT_HANDLE);
	char buf[2]; COORD c = { x,y }; DWORD num_read;
	if (
		!ReadConsoleOutputCharacter(hStd, (LPTSTR)buf, 1, c, (LPDWORD)&num_read))

		return '\0';
	else
		return buf[0];

}

int setConsole(int x, int y)
{
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
	SetConsoleScreenBufferSize(wHnd, bufferSize);
	return 0;
}

int setMode()
{
	rHnd = GetStdHandle(STD_INPUT_HANDLE);
	fdwMode = ENABLE_EXTENDED_FLAGS | ENABLE_WINDOW_INPUT |
		ENABLE_MOUSE_INPUT;
	SetConsoleMode(rHnd, fdwMode);
	return 0;
}

void clear_buffer()
{
	for (int y = 0; y < 20; ++y) {
		for (int x = 10; x < 70; ++x) {
			consoleBuffer[x + screen_x * y].Attributes = color;
			consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
		}
	}
}
void fill_buffer_to_console()
{
	WriteConsoleOutputA(wHnd, consoleBuffer, bufferSize, characterPos,
		&windowSize);
}

void mask_draw(int x, int y) {
	gotoxy(x, y);
	printf(" [|==|] ");
}

void alcohol_draw(int x, int y,int bullet) {
	gotoxy(x, y);
	printf(" [%d]-|-[%d] ", bullet, bullet);
}

void me() {
	int y = 20;
		for (int x = 0; x < 80; ++x) {
			consoleBuffer[x + screen_x * y].Attributes = 11;
			consoleBuffer[x + screen_x * y].Char.AsciiChar = '_';
		}
	
}
void covid_draw()
{
	for (int i = 0; i < scount; i++) {
		covidx[i] = 10 + rand() % 61;
		covidy[i] = -20 + rand() % 21;
	}
}
void score_count(int x, int y, int a) {
	gotoxy(x, y);
	printf(" Score : %d", a);
}
void covid_fall()
{
	int i = 0;

	for (i = 0; i < scount; i++) {
		check += 1;
		if (covidy[i] >= screen_y - 1) {
			covidx[i] = 0 + rand() % screen_x;
			covidy[i] = 1;
		}
		else {
			covidy[i] = covidy[i] + 1;

		}
	}
}

void change_color() { color = 1 + rand() % 9; }

void fill_covid_to_buffer()
{
	for (int i = 0; i < scount; i++) {
		int x = covidx[i];
		int y = covidy[i];
		if (covidy[i] >= 0) {
		consoleBuffer[x + screen_x * y].Char.AsciiChar = '*';
	  }
	}
}

int main()
{
	int hp = 10;
	int score = 0;
	char check1, check2, check3, check4;
	char ch = '.';
	setcursor(0);
	int i = 0, x = 0, y = 0;
	srand(time(NULL));
	setConsole(screen_x, screen_y);
	covid_draw();
	bool play = true;
	DWORD numEvents = 0;
	DWORD numEventsRead = 0;
	setConsole(screen_x, screen_y);
	setMode();
	//for (int i = 0; i < scount; i++) {
	//	printf("(%d,%d)", covidx[i], covidy[i]);
	//}
	mask_draw(40, 12);
	

	while (play)
	{
		if (_kbhit()) {
			ch = _getch();
			if (ch == 'c' || ch == 'C') {
				change_color(); ch = '.';
			}

		}
		//std::thread cf(covid_fall, 500);
		//cf.detach();
		//std::thread cb(clear_buffer, 500);
		//cb.detach();
		//std::thread fcb(fill_covid_to_buffer,500);
		//fcb.detach();
		//std::thread fbc(fill_buffer_to_console,500);
		//fbc.detach();
		covid_fall();
		clear_buffer();
		fill_covid_to_buffer();
		fill_buffer_to_console();
		me();
		score_count(0, 1, score);
		check1 = cursor(x + 2, y - 1);
		check2 = cursor(x + 3, y - 1);
		check3 = cursor(x + 4, y - 1);
		check4 = cursor(x + 5, y - 1);
			if (check1 == '*' || check2 == '*' || check3 == '*' || check4 == '*') {
			score = score + 1;
			for (int i = 0; i < scount; i++) {
				if (covidy[i] == y - 1 && covidx[i] == x + 2) {
					covidx[i] = 0 + rand() % screen_x;
					covidy[i] = 1;
				}
				if (covidy[i] == y - 1 && covidx[i] == x + 3) {
					covidx[i] = 0 + rand() % screen_x;
					covidy[i] = 1;
				}
				if (covidy[i] == y - 1 && covidx[i] == x + 4) {
					covidx[i] = 0 + rand() % screen_x;
					covidy[i] = 1;
				}
				if (covidy[i] == y - 1 && covidx[i] == x + 5) {
					covidx[i] = 0 + rand() % screen_x;
					covidy[i] = 1;
				}
			}
		}
		if (hp == 0 || ch == esc) {
			break;
		}
		GetNumberOfConsoleInputEvents(rHnd, &numEvents);
		if (numEvents != 0) {
			INPUT_RECORD* eventBuffer = new INPUT_RECORD[numEvents];
			ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);
			for (DWORD i = 0; i < numEventsRead; ++i) {
				if (eventBuffer[i].EventType == KEY_EVENT && eventBuffer[i].Event.KeyEvent.bKeyDown == true) {
					if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) {
						play = false;
					}
				}
				else if (eventBuffer[i].EventType == MOUSE_EVENT) {
					int posx = eventBuffer[i].Event.MouseEvent.dwMousePosition.X;
					int posy = eventBuffer[i].Event.MouseEvent.dwMousePosition.Y;
					x = posx - 3;
					y = posy;
					if (eventBuffer[i].Event.MouseEvent.dwButtonState &
						FROM_LEFT_1ST_BUTTON_PRESSED) {
						//change_color();
					}
				}
			}
			delete[] eventBuffer;
		}
		mask_draw(x, y);
		Sleep(100);
	}
	return 0;
}
