#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <windows.h>
#include <time.h>
#include <conio.h>
#include <thread>
#include <stdbool.h>
#include <string.h>

#define esc 27
#define scount 20
#define screen_x 80
#define screen_y 25
#define VK_a 0x61
HANDLE rHnd;
DWORD fdwMode;
HANDLE wHnd;
CHAR_INFO consoleBuffer[screen_x * screen_y];
COORD bufferSize = { screen_x,screen_y };
COORD characterPos = { 0,0 };
SMALL_RECT windowSize = { 0,0,screen_x - 1,screen_y - 1 };
DWORD numEvents = 0;
DWORD numEventsRead = 0;

int color = 7;
int check = 0;
int round_eny = 0;
int covidx[scount], covidy[scount], covid_color[scount], item_plusx = 0, item_plusy = 0;
int waitfor = 0, first = 0;
bool gotit = false;
int maskx = 40, masky = 18;
int bufferx, buffery;

//void new_buuffersize() {
//	for (int i = 0; i < 420; i++) {
//		bufferSize[i] = {};
//	}
//}

void setcursor(bool visible) {
	HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO lpCursor;
	lpCursor.bVisible = visible;
	lpCursor.dwSize = 20;
	SetConsoleCursorInfo(console, &lpCursor);
}

void gotoxy(int x, int y)
{
	COORD c = { x, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}

void setcolor(int fg, int bg) {
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hConsole, bg * 16 + fg);
}

char cursor(int x, int y) {
	HANDLE hStd = GetStdHandle(STD_OUTPUT_HANDLE);
	char buf[2]; COORD c = { x,y }; DWORD num_read;
	if (!ReadConsoleOutputCharacter(hStd, (LPTSTR)buf, 1, c, (LPDWORD)&num_read)) {
		return '\0';
	}
	else { return buf[0]; }
}

int setConsole(int x, int y)
{
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
	SetConsoleScreenBufferSize(wHnd, bufferSize);
	return 0;
}

int setMode()
{
	rHnd = GetStdHandle(STD_INPUT_HANDLE);
	fdwMode = ENABLE_EXTENDED_FLAGS | ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT;
	SetConsoleMode(rHnd, fdwMode);
	return 0;
}

void clear_buffer()
{   
	for (int y = 0; y < 20; y++) {
		for (int x = 30; x < 50; x++) {
			consoleBuffer[x + screen_x * y].Attributes = color;
			consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
		}
	}
}

void gimme_yourname() {
	gotoxy(32, 9);
	printf("ENTER YOUR NAME\n");
	gotoxy(27, 10);
	printf("(less than 20 Characters)");
	gotoxy(31, 12);
	printf("> ");
}
void clear_bullet(int x, int y) {
	setcolor(7, 0);
	gotoxy(x, y); printf(" ");
}

void fill_buffer_to_console() {
	WriteConsoleOutputA(wHnd, consoleBuffer, bufferSize, characterPos, &windowSize);
}

void mask_draw(int x, int y) {
	gotoxy(x, y);
	setcolor(7, 0);
	printf(" [|==|] ");
}

void alcohol_draw(int x, int y,int bullet) {
	gotoxy(x, y);
	setcolor(7, 0);
	printf(" [%d]-|-[%d] ", bullet, bullet);
}

void bullet_draw(int x, int y) {
	gotoxy(x, y);
	setcolor(0, 3);
	printf(" ^ ");
}

void itemplus_draw() {
	item_plusx = 30 + rand() % 20;
	item_plusy = -1;
}

void itemplus_fall() {
		if ( item_plusy >= 20 ) {
			item_plusx = 30 + rand() % 20;
			item_plusy = 0;
		}
		else {
			item_plusy += 1;
		}
}

void fill_itemplus_to_buffer() {
		int x = item_plusx;
		int y = item_plusy;
		//if (y >= 20 ) {
			consoleBuffer[x + screen_x * y].Attributes = 11;
			consoleBuffer[x + screen_x * y].Char.AsciiChar = '+';
		//}
}

void me(int x, int y,char s[]) {
	int a = 20;
		for (int x = 0; x < 80; ++x) {
			consoleBuffer[x + screen_x * a].Attributes = 11;
			consoleBuffer[x + screen_x * a].Char.AsciiChar = '_';
		}
		gotoxy(x, y);
		setcolor(13,15);
		printf(" %s ", s);
}

void covid_draw() { 
	for (int i = 0; i < scount; i++) {
		covidx[i] = 30 + rand() % 20;
		covidy[i] = -40 + rand() % 36;
	}
}

void score_count(int a) {
	gotoxy(0, 1);
	setcolor(0, 15);
	printf(" Score : %d ", a);
}

void hp_count(int a) {
	gotoxy(0, 3);
	setcolor(4, 15);
	printf(" HP : %d ", a);
}

void covid_fall() {
	int i = 0;
	for (i = 0; i < scount; i++) {
		check += 1;
		if (covidy[i] >= screen_y - 1) {
			covidx[i] = 30 + rand() % 20;
			covidy[i] = -30 + rand() % 20;
		}
		else {
			covidy[i] = covidy[i] + 1;
		}
	}
}

void change_color() { color = 1 + rand() % 9; }
void clear_screen() {
	for (int y = 0; y < 20; y++) {
		for (int x = 0; x < 80; x++) {
			gotoxy(x, y);
			printf(" ");
		}
	}
}
void fill_covid_to_buffer() {
	for (int i = 0; i < scount; i++) {
		int x = covidx[i];
		int y = covidy[i];
		if (covidy[i] >= 0) {
		consoleBuffer[x + screen_x * y].Char.AsciiChar = '*';
	  }
	}
}

void game_starto() {
	gotoxy(30, 10);
	setcolor(15, 13);
	printf(" HUMAN VS COVID-19 ");
	
	gotoxy(26, 12);
	setcolor(7, 0);
	//printf(" Press 'Enter' to continue ");
}

void high_score() {
	gotoxy(30, 16);
	printf("High Score\n");

}

int main()
{   
	char myname[20],startEnter;
	int countdown = 0,namelange;
	int hp = 2000;
	int score = 0;
	char check1, check2, check3, check4, check5, check6, checkGotAttack;
	char ch = '.';
	char ch_move = '.';
	setcursor(0);
	int i = 0, x = 0, y = 0, direction = 0,r=0;
	int bullet[10], xb[10], ye[10], ybt[10], xe[10], shoot[10];
	for (int i = 0; i < 5; i++) {
		shoot[i] = 0;
		bullet[i] = 0;
		xb[i] = 0;
		ye[i] = 0;
		ybt[i] = 0;
		xe[i] = 0;
	}
	int al_x = 40;
	int al_y = 19;
	int total_bullet = 10;
	int rex = 0, rey = 0;
	int bx, by, ib = 0;
	srand(time(NULL));
	setConsole(screen_x, screen_y);
	bool change_alcohol = false;
	bool play = false;
	bool noneStop = true;
	bool still_mask = true;
	bool still_alcohol = false;
	FILE* fp;
	DWORD numEvents = 0;
	DWORD numEventsRead = 0;
	setConsole(screen_x, screen_y);	
	//int newWidth = 16, newHeight = 28;
	//CONSOLE_FONT_INFOEX fontStructure = { 0 };
	//fontStructure.cbSize = sizeof(fontStructure);
    //fontStructure.dwFontSize.X = newWidth;
	//fontStructure.dwFontSize.Y = newHeight;
	//wcscpy(fontStructure.FaceName, L"Arial");
	//HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	//SetCurrentConsoleFontEx(hConsole, true, &fontStructure);
	struct player {
		char name[20];
		int score;
		int place;
	};
	player p[3];
	itemplus_draw();
	while (1) {
		game_starto();
		system("pause");
		break;
	}
	clear_screen();
	gimme_yourname();
	printf("\nHIGH SCORE");
	scanf("%[^\n]",myname);
	//for ();
	//strcpy(p[0].name, myname);
	namelange = strlen(myname);
	namelange = 40-(namelange / 2); 
	p[0].place = 1; p[1].place = 2; p[2].place = 3;
	p[0].score = 0; p[1].score = 0; p[2].score = 0;
	for (int i = 0; i < 3; i++) {
		strcpy(p[i].name, myname);
	}
	fp = fopen("Top_Player.txt", "w");
	//for (int i = 0; i < 3; i++) {
	fprintf(fp, " #\tname\tScore\n");
	fprintf(fp, " %d.\t%s\t%d\n", p[0].place, p[0].name, p[0].score);
	fprintf(fp, " %d.\t%s\t%d\n", p[1].place, p[1].name, p[1].score);
	fprintf(fp, " %d.\t%s\t%d\n", p[2].place, p[2].name, p[2].score);
	fclose(fp);
   //}
	//FILE* fp;
	//fp = fopen("Top_Player.txt", "r");
	//for (int i = 0; i < 3; i++) {
	//	fscanf(fp, "%d %s %d", &p[0].place, &p[0].name, &p[0].score);
	//	fscanf(fp, "%d %s %d", &p[0].place, &p[0].name, &p[0].score);
	//	fscanf(fp, "%d %s %d", &p[0].place, &p[0].name, &p[0].score);
	//}
	//fclose(fp);
	setMode();
	covid_draw();
	int checking;
	mask_draw(maskx, masky);
	play = true;
		while(play)
		{
			//if (still_mask) {
				//if (_kbhit()) {
					//ch = _getch();
					//if (ch == 'c' || ch == 'C') {
						//change_color(); ch = '.';
					//}
				//}
				//std::thread cf(covid_fall);
				//cf.detach();
				//std::thread cb(clear_buffer, 500);
				//cb.detach();
				//std::thread fcb(fill_covid_to_buffer,500);
				//fcb.detach();
				//std::thread fbc(fill_buffer_to_console,500);
				//fbc.detach();
				if ( countdown >= 500) {
					itemplus_fall();
				}
				covid_fall();
				clear_buffer();
				fill_covid_to_buffer();
			    fill_itemplus_to_buffer();
				fill_buffer_to_console();
				me(namelange,22,myname);
				score_count(score);
				hp_count(hp);
				check1 = cursor(maskx + 1, masky - 1);
				check2 = cursor(maskx + 2, masky - 1);
				check3 = cursor(maskx + 3, masky - 1);
				check4 = cursor(maskx + 4, masky - 1);
				check5 = cursor(maskx + 5, masky - 1);
				check6 = cursor(maskx + 6, masky - 1);
				if (still_mask) {
					//check1 = cursor(maskx + 1, masky - 1);
					//check2 = cursor(maskx + 2, masky - 1);
					//check3 = cursor(maskx + 3, masky - 1);
					//check4 = cursor(maskx + 4, masky - 1);
					//check5 = cursor(maskx + 5, masky - 1);
					//check6 = cursor(maskx + 6, masky - 1);
					for (int n = 0; n < 80; n++) {
						checkGotAttack = cursor(n, 20);
						if (checkGotAttack == '*') {
							hp = hp - 1;
							checkGotAttack = '.';
						}
					}
					if (check1 == '*' || check2 == '*' || check3 == '*' || check4 == '*' || check5 == '*' || check6 == '*') {
						score = score + 1;
						for (int i = 0; i < scount; i++) {
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 1) {
								covidx[i] = 30 + rand() % 20;
								covidy[i] = -60+ rand() % 20;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 2) {
								covidx[i] = 30 + rand() % 20;
								covidy[i] = -60 + rand() % 20;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 3) {
								covidx[i] = 30 + rand() % 20;
								covidy[i] = -60 + rand() % 20;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 4) {
								covidx[i] = 30 + rand() % 20;
								covidy[i] = -60 + rand() % 20;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 5) {
								covidx[i] = 30 + rand() % 20;
								covidy[i] = -60 + rand() % 20;
							}
							if (covidy[i] == masky - 1 && covidx[i] == maskx + 6) {
								covidx[i] = 30 + rand() % 20;
								covidy[i] = -60 + rand() % 20;
							}
						}
					}
					countdown += 10; 
					printf("%5d", countdown);
					if (check1 == '+' || check2 == '+' || check3 == '+' || check4 == '+') {
						gotit = true;
						still_mask = false;
						still_alcohol = true;
						itemplus_draw();
					}

					if (ch == esc) {
						gotoxy(25, 13);
						system("pause");
						ch = '.';
						mask_draw(maskx, masky);
					}
					else if (hp <= 0) {
						hp_count(hp);
						break;
					}
					GetNumberOfConsoleInputEvents(rHnd, &numEvents);
					if (numEvents != 0) {
						INPUT_RECORD* eventBuffer = new INPUT_RECORD[numEvents];
						ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);
						for (DWORD i = 0; i < numEventsRead; ++i) {
							if (eventBuffer[i].EventType == KEY_EVENT && eventBuffer[i].Event.KeyEvent.bKeyDown == true) {
								if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) {
									play = false;
								}
							}
							else if (eventBuffer[i].EventType == MOUSE_EVENT) {
								int posx = eventBuffer[i].Event.MouseEvent.dwMousePosition.X - 3;
								int posy = eventBuffer[i].Event.MouseEvent.dwMousePosition.Y;
								maskx = posx;
								masky = posy;
								mask_draw(maskx, masky);

								if (eventBuffer[i].Event.MouseEvent.dwButtonState & FROM_LEFT_1ST_BUTTON_PRESSED) {
									//change_color();
								}
							}
						}
						delete[] eventBuffer;
					}

					Sleep(100);
				}
			//}
				if (still_alcohol) {
					//เปลี่ยนเป็นEventแทน//
					//alcohol_draw(al_x, al_y, total_bullet);
					//if (_kbhit()) {
						//ch_move = _getch();
						//if (ch_move == 'a') { direction = -1; }
						//if (ch_move == 'd') { direction = 1; }
						//if (ch_move == 's') { direction = 0; }
						//if (ch_move == ' ' && bullet[(r + 1) % 10] == 0) {
							//r = (r + 1) % 10;
							//printf("%d", r);
							//ybt[r] = 18;
							//xb[r] = al_x + 7;
							//bullet[r] = 1;
							//total_bullet -= 1;
						//}
						//fflush(stdin);
						GetNumberOfConsoleInputEvents(rHnd, &numEvents);
						if (numEvents != 0) {
							INPUT_RECORD* eventBuffer = new INPUT_RECORD[numEvents];
							ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);
							for (DWORD i = 0; i < numEventsRead; ++i) {
								if (eventBuffer[i].EventType == KEY_EVENT && eventBuffer[i].Event.KeyEvent.bKeyDown == true) {
									if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 97) {
										direction = -1;
									}
									else if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 100) {
										direction = 1;
									}
									else if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 115) {
										direction = 0;
									}
									else if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == ' ' && bullet[(r + 1) % 10] == 0) {
										r = (r + 1) % 10;
							            ybt[r] = 18;
							            xb[r] = al_x + 7;
							            bullet[r] = 1;
							            total_bullet -= 1;
									}
									else if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) {
										system("pause");
									}
								}
					    }
					delete[] eventBuffer;
					}
					for (int i = 0; i < 5; i++) {
						if (bullet[i] == 1) {
							bullet_draw(xb[i], --ybt[i]);
							if (ybt[i] == 0) {
								bullet[i] = 0;
							}
						}
					}
					if (direction == -1 && al_x > 0) {
						al_x -= 1;
						alcohol_draw(--al_x, al_y, total_bullet);
					}
					else if (direction == 1 && al_x < 69) {
						al_x += 1;
						alcohol_draw(++al_x, al_y, total_bullet);
					}
					else if (direction == 0) {
						alcohol_draw(al_x, al_y, total_bullet);
					}
						for (int n = 0; n < 80; n++) {
							checkGotAttack = cursor(n, 20);
							if (checkGotAttack == '*') {
								hp = hp - 1;
								checkGotAttack = '.';
							}
						}
						if (total_bullet == 0 ) {
							still_alcohol = false;
							still_mask = true;
							gotit = false;
							countdown = 0;
							total_bullet = 10;
							al_x = 40;
						}
						if (ch_move == esc) {
							system("pause");
							ch_move = '.';
						}
						else if (hp <= 0) {
							fp = fopen("Top_Player.txt", "w");
							//for (int i = 0; i < 3; i++) {
								fprintf(fp, "\t#\tname\tScore\n");
								fprintf(fp, "\t%d.\t%s\t%d\n", p[0].place, p[0].name, p[0].score);
								fprintf(fp, "\t%d.\t%s\t%d\n", p[1].place, p[1].name, p[1].score);
								fprintf(fp, "\t%d.\t%s\t%d\n", p[2].place, p[2].name, p[2].score);
							//}
							fclose(fp);
							break;
						}
						Sleep(100);
					}
				 if (hp <= 0) {
						break;

					}
             }
		//}
	return 0;
} 

		
